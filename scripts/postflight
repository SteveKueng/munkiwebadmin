#!/usr/bin/env python

import os
import sys
import logging
import logging.handlers
import time
import subprocess
from stat import *

# ------------ Log -------------
# set Log path for root or user
if os.geteuid() == 0:
	LOG_PATH = "/var/log/"
else:
	LOG_PATH = os.path.expanduser("~")+"/Library/Logs/"

# create log path
if not os.path.exists(LOG_PATH):
	os.makedirs(LOG_PATH)

LOG_FILENAME = LOG_PATH+os.path.basename(__file__)+".log"
LOG_LEVEL = logging.ERROR

# Set up a specific logger with our desired output level
logger = logging.getLogger(__name__)
logger.setLevel(LOG_LEVEL)

# Add the log message handler to the logger
handler = logging.handlers.RotatingFileHandler(LOG_FILENAME, maxBytes=200000, backupCount=3)
handler.setLevel(LOG_LEVEL)

# create a logging format
formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(message)s', '%Y-%m-%d %H:%M:%S')
handler.setFormatter(formatter)
logger.addHandler(handler)

# -------------------------

# ------ varriables -------
munki_dir = "/usr/local/munki"
preflight_dir = os.path.join(munki_dir, 'postflight.d')

# ----- functions ------
def check_perms(pathname):
    mode = os.stat(pathname).st_mode
    owner = os.stat(pathname).st_uid
    if owner == 0 and (mode & S_IXOTH) and not (mode & S_IWOTH):
        return True
    return False

def run_script(pathname):
    try:
        proc = subprocess.Popen(pathname, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        logger.info('Processing %s' % pathname)
        (out, err) = proc.communicate()
        if err:
            logger.error('Failure processing %s: %s' % (pathname, err))
    except OSError:
        logger.error('Failure processing %s: %s' % (pathname, OSError))

def main():
    logger.info('Start postflight script')
    if not os.path.exists(preflight_dir):
		logger.info('Create %s' % preflight_dir)
		try:
			os.mkdir(preflight_dir)
		except IOError as (errno, strerror):
			logger.error('Failure processing %s' % preflight_dir)
			logger.error('Error %s: %s' % (errno, strerror))
		except:
			logger.error('Unexpected error: %s' % sys.exc_info()[0])
			raise
    else:
        for f in os.listdir(preflight_dir):
            pathname = os.path.join(preflight_dir, f)
            if check_perms(pathname):
                run_script(pathname)
            else:
                logger.error('Permission error %s' % pathname)
    logger.info('end postflight script')

if __name__ == '__main__':
  main()
